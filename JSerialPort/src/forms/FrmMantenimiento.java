/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FrmMantenimiento.java
 *
 * Created on 9/03/2011, 09:27:07 AM
 */

package forms;

import Util.Options;
import Util.PuertoObj;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.List;
import java.util.StringTokenizer;
import javax.swing.Timer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.LookAndFeel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author Rene Quintero
 */
public class FrmMantenimiento extends javax.swing.JFrame {

    /** Creates new form FrmMantenimiento */
    public FrmMantenimiento() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtFormatoCadena = new javax.swing.JTextField();
        txtSubcadena = new javax.swing.JTextField();
        chkLecturaContinua = new javax.swing.JCheckBox();
        txtComandoLectura = new javax.swing.JTextField();
        txtSegundos = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        btnPrueba = new javax.swing.JButton();
        list1 = new java.awt.List();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cmbPuerto = new javax.swing.JComboBox();
        cmbBaudios = new javax.swing.JComboBox();
        cmbParidad = new javax.swing.JComboBox();
        cmbBitsCaracter = new javax.swing.JComboBox();
        cmbBitsParada = new javax.swing.JComboBox();
        cmbControlFlujo = new javax.swing.JComboBox();
        cmbModoLectura = new javax.swing.JComboBox();
        btnGrabar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Configuracion de dispositivo");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Informacion de comandos"));

        jLabel9.setText("Formato cadena:");

        jLabel10.setText("Subcadena:");

        jLabel11.setText("Comando lectura:");

        chkLecturaContinua.setText("Configurado con lectura continua");

        txtSegundos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSegundosKeyTyped(evt);
            }
        });

        jLabel12.setText("Intervalo lectura:");

        jLabel13.setText("segundos.");

        btnPrueba.setText("Iniciar prueba");
        btnPrueba.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnPruebaMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(btnPrueba)
                    .add(jLabel12)
                    .add(jLabel11)
                    .add(jLabel10)
                    .add(jLabel9))
                .add(6, 6, 6)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(txtSegundos, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel13))
                    .add(txtComandoLectura)
                    .add(list1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                    .add(txtFormatoCadena)
                    .add(txtSubcadena, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                    .add(chkLecturaContinua, 0, 0, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel9)
                    .add(txtFormatoCadena, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel10)
                    .add(txtSubcadena, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(5, 5, 5)
                .add(chkLecturaContinua)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel11)
                    .add(txtComandoLectura, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel12)
                    .add(txtSegundos, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel13))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(btnPrueba)
                    .add(list1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Informacion de conexion"));

        jLabel1.setText("Nombre:");

        txtNombre.setName("txtNombre"); // NOI18N

        jLabel2.setText("Puerto:");

        jLabel3.setText("Baudios:");

        jLabel4.setText("Paridad:");

        jLabel5.setText("Bits por caracter:");

        jLabel6.setText("Bits de parada:");

        jLabel7.setText("Control de flujo:");

        jLabel8.setText("Modo lectura:");

        cmbPuerto.setName("cmbPuerto"); // NOI18N

        cmbBaudios.setName("cmbPuerto"); // NOI18N

        cmbParidad.setName("cmbPuerto"); // NOI18N

        cmbBitsCaracter.setName("cmbPuerto"); // NOI18N

        cmbBitsParada.setName("cmbPuerto"); // NOI18N

        cmbControlFlujo.setName("cmbPuerto"); // NOI18N

        cmbModoLectura.setName("cmbPuerto"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel4)
                    .add(jLabel5)
                    .add(jLabel3)
                    .add(jLabel8)
                    .add(jLabel7)
                    .add(jLabel6)
                    .add(jLabel2)
                    .add(jLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(cmbModoLectura, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 176, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cmbParidad, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 176, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cmbBitsCaracter, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 176, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cmbBitsParada, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 176, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cmbControlFlujo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 176, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtNombre, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 176, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cmbBaudios, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 176, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cmbPuerto, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 176, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(new java.awt.Component[] {cmbBaudios, cmbBitsCaracter, cmbBitsParada, cmbControlFlujo, cmbModoLectura, cmbParidad, cmbPuerto, txtNombre}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(txtNombre, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cmbPuerto, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2))
                .add(8, 8, 8)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cmbBaudios, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cmbParidad, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cmbBitsCaracter, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel5))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cmbBitsParada, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel6))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cmbControlFlujo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel7))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cmbModoLectura, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel8))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(new java.awt.Component[] {cmbBaudios, cmbBitsCaracter, cmbBitsParada, cmbControlFlujo, cmbModoLectura, cmbParidad, cmbPuerto, txtNombre}, org.jdesktop.layout.GroupLayout.VERTICAL);

        btnGrabar.setText("Grabar");
        btnGrabar.setName("btnGrabar"); // NOI18N
        btnGrabar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnGrabarMouseClicked(evt);
            }
        });
        btnGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGrabarActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.setName("btnSalir"); // NOI18N
        btnSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSalirMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .add(btnGrabar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnSalir, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnGrabar)
                    .add(btnSalir))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        inicializaFormulario();

        //SE muestra lainformacion si es que hay algo guardado
        muestraConfiguracion();

    }//GEN-LAST:event_formWindowOpened

    private void btnGrabarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGrabarMouseClicked

        grabaConfiguracion();
    }//GEN-LAST:event_btnGrabarMouseClicked

    private void btnPruebaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPruebaMouseClicked
        try {

            if(bTestIniciado){
                FinalizaTest();
            }else{
                IniciaTest();
            }

        } catch (Exception ex) {
            Logger.getLogger(FrmMantenimiento.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnPruebaMouseClicked

    private void btnGrabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGrabarActionPerformed

/*        if(bTestIniciado){
            FinalizaTest();
        }else{
            IniciaTest();
        }
*/
    }//GEN-LAST:event_btnGrabarActionPerformed

    private void btnSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSalirMouseClicked
        dispose();

    }//GEN-LAST:event_btnSalirMouseClicked

    private void txtSegundosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSegundosKeyTyped
        // TODO add your handling code here:
        System.out.println( evt.getKeyChar());

        

        
    }//GEN-LAST:event_txtSegundosKeyTyped

    private boolean bTestIniciado = false;
    private PuertoObj puerto;
    
    Timer tmrLecturas;

    private void IniciaTest(){
        try {

            list1.removeAll();
            puerto = new PuertoObj();
            puerto.ConfiguraPuerto(((Options) cmbPuerto.getSelectedItem()).getValue(),
                                    ((Options) cmbBaudios.getSelectedItem()).getValue(),
                                    ((Options) cmbParidad.getSelectedItem()).getValue(),
                                    ((Options) cmbBitsCaracter.getSelectedItem()).getValue(),
                                    ((Options) cmbBitsParada.getSelectedItem()).getValue());

            puerto.setFormatoCadena(txtFormatoCadena.getText());
            puerto.setSubCadena(txtSubcadena.getText());
            
            int segs = (int)(Double.parseDouble(txtSegundos.getText()) * 1000);

            tmrLecturas = new Timer(segs, new ActionListener ()
                {
                    public void actionPerformed(ActionEvent e)
                    {
                        String sLeido;

                        if (!chkLecturaContinua.isSelected())
                        {
                            try {
                                puerto.EscribirDatos(txtComandoLectura.getText());
                            } catch (Exception ex) {
                                //Logger.getLogger(FrmMantenimiento.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }

                        sLeido = puerto.LeerDatos();
                        
                        //System.out.println(sLeido);
                        if(sLeido.compareTo("")!=0){

                            list1.add(sLeido);
                        }
                     }
                });

            puerto.AbrirPuerto();

            tmrLecturas.setRepeats(true);
            tmrLecturas.start();

            bTestIniciado = true;

            btnPrueba.setText("Termina Prueba");
            
        } catch (Exception ex) {
            Logger.getLogger(FrmMantenimiento.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }

    }
    private void FinalizaTest(){
            try
            {
                puerto.CerrarPuerto();

                tmrLecturas.stop();
                tmrLecturas = null;
                bTestIniciado = false;
                btnPrueba.setText("Iniciar Prueba");
            }
            catch (Exception ex)
            {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                //MessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
    }

    private void inicializaFormulario(){

        //txtSegundos.setKeymap(new Keymap)

        cmbPuerto.removeAllItems();

        List<String> portsFree = PuertoObj.getPuertosLibres();
        for (String free : portsFree) {
            cmbPuerto.addItem(new Options(free,free));
        }

        //Se llena el combo de baudios
        cmbBaudios.removeAllItems();
        //cmbBaudios.addItem(new Options("110", "110"));
        //cmbBaudios.addItem(new Options("300", "300"));
        //cmbBaudios.addItem(new Options("600", "600"));
        cmbBaudios.addItem(new Options("_1200", "1200"));
        cmbBaudios.addItem(new Options("_2400", "2400"));
        cmbBaudios.addItem(new Options("_4800", "4800"));
        cmbBaudios.addItem(new Options("_9600", "9600"));
        //cmbBaudios.addItem(new Options("14400", "14400"));
        cmbBaudios.addItem(new Options("_19200", "19200"));
        cmbBaudios.addItem(new Options("_38400", "38400"));
        cmbBaudios.addItem(new Options("_57600", "57600"));
        cmbBaudios.addItem(new Options("_115200", "115200"));
        cmbBaudios.addItem(new Options("_460800", "460800"));

         //Sellena el combo de paridad
        cmbParidad.removeAllItems();
        cmbParidad.addItem(new Options("N", "None - Ninguna"));
        cmbParidad.addItem(new Options("E", "Even - Par"));
        cmbParidad.addItem(new Options("O", "Odd - Impar"));
        //cmbParidad.addItem(new Options("M", "Mark - Marca"));
        cmbParidad.addItem(new Options("S", "Space - Espacio"));

        //Se llena el combo de bits por caracter
        cmbBitsCaracter.removeAllItems();
        for (int j = 5; j <= 8; j++)
        {
            cmbBitsCaracter.addItem(new Options(String.valueOf(j) , String.valueOf(j)));
        }

        //El combo bits de parada
        cmbBitsParada.removeAllItems();
        cmbBitsParada.addItem(new Options("1", "1"));
        cmbBitsParada.addItem(new Options("1.5", "1.5"));
        cmbBitsParada.addItem(new Options("2", "2"));

        //Se configura el combo de control de flujo
        cmbControlFlujo.removeAllItems();
        cmbControlFlujo.addItem(new Options("0", "Ninguno"));
        cmbControlFlujo.addItem(new Options("1", "Xon-Xoff"));
        cmbControlFlujo.addItem(new Options("2", "Hardware(RTS/CTS)"));
        cmbControlFlujo.addItem(new Options("3", "Ambos(RTS y Xon/Xoff)"));

        cmbModoLectura.removeAllItems();
        cmbModoLectura.addItem(new Options("0", "Modo Texto"));
        cmbModoLectura.addItem(new Options("1", "Modo binario"));

    }
    private void grabaConfiguracion(){

            if (txtNombre.toString().trim().length() == 0)
            {
                JOptionPane.showMessageDialog(this,"Debe escribir el nombre del dispositivo");
                return;
            }

            String cad = "";
            cad += txtNombre.getText() + "|";
            cad += ((Options)cmbPuerto.getSelectedItem()).getValue() + "|";
            cad += ((Options)cmbBaudios.getSelectedItem()).getValue() + "|";
            cad += ((Options)cmbParidad.getSelectedItem()).getValue() + "|";
            cad += ((Options)cmbBitsCaracter.getSelectedItem()).getValue() + "|";
            cad += ((Options)cmbBitsParada.getSelectedItem()).getValue() + "|";
            cad += ((Options)cmbControlFlujo.getSelectedItem()).getValue() + "|";
            cad += ((Options)cmbModoLectura.getSelectedItem()).getValue() + "|";

            cad += txtFormatoCadena.getText() + "|";
            cad += txtSubcadena.getText() + "|";
            cad += (chkLecturaContinua.isSelected()) ? "SI|" : "NO|";
            cad += txtComandoLectura.getText() + "|";
            cad += txtSegundos.getText() + "|";

            String archivo = System.getProperty("user.dir");
            try{
                Util.Util.grabarArchivo( archivo + File.separatorChar + "info.dll", cad);
            }catch(Exception ex){
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }

        }

        private void muestraConfiguracion()
        {

            String archivo = System.getProperty("user.dir");

            String cad="";
            try {

                cad = Util.Util.leerArchivo(archivo + File.separatorChar + "info.dll");
            } catch (Exception ex) {
                Logger.getLogger(FrmMantenimiento.class.getName()).log(Level.SEVERE, null, ex);
            }

            StringTokenizer vec = new StringTokenizer(cad,"|");

            // La posicion 0 del vector corresponde al nombre
            txtNombre.setText(vec.nextElement().toString());

            //Las siguientes posiciones correponden a puerto,baudios,paridad,bitsporcaracter
            //bitsdeparada,controldeflujo,modolectura respectivamente

            int i = 0;
            String sEle = vec.nextToken();
            for(i=0;i<cmbPuerto.getItemCount();i++){

                Options op = (Options)cmbPuerto.getItemAt(i);
                if(op.getValue().compareTo(sEle)==0){
                    cmbPuerto.setSelectedIndex(i);
                    break;
                }
            }
            sEle = vec.nextToken();
            for(i=0;i<cmbBaudios.getItemCount();i++){

                Options op = (Options)cmbBaudios.getItemAt(i);
                if(op.getValue().compareTo(sEle)==0){
                    cmbBaudios.setSelectedIndex(i);
                    break;
                }
            }
            sEle = vec.nextToken();
            for(i=0;i<cmbParidad.getItemCount();i++){

                Options op = (Options)cmbParidad.getItemAt(i);
                if(op.getValue().compareTo(sEle)==0){
                    cmbParidad.setSelectedIndex(i);
                    break;
                }
            }
            sEle = vec.nextToken();
            for(i=0;i<cmbBitsCaracter.getItemCount();i++){

                Options op = (Options)cmbBitsCaracter.getItemAt(i);
                if(op.getValue().compareTo(sEle)==0){
                    cmbBitsCaracter.setSelectedIndex(i);
                    break;
                }
            }
            sEle = vec.nextToken();
            for(i=0;i<cmbBitsParada.getItemCount();i++){

                Options op = (Options)cmbBitsParada.getItemAt(i);
                if(op.getValue().compareTo(sEle)==0){
                    cmbBitsParada.setSelectedIndex(i);
                    break;
                }
            }
            sEle = vec.nextToken();
            for(i=0;i<cmbControlFlujo.getItemCount();i++){

                Options op = (Options)cmbControlFlujo.getItemAt(i);
                if(op.getValue().compareTo(sEle)==0){
                    cmbControlFlujo.setSelectedIndex(i);
                    break;
                }
            }
            sEle = vec.nextToken();
            for(i=0;i<cmbModoLectura.getItemCount();i++){

                Options op = (Options)cmbModoLectura.getItemAt(i);
                if(op.getValue().compareTo(sEle)==0){
                    cmbModoLectura.setSelectedIndex(i);
                    break;
                }
            }

            //Ahora el formato de la cadena
            txtFormatoCadena.setText(vec.nextToken());
            txtSubcadena.setText( vec.nextToken());
            chkLecturaContinua.setSelected( (vec.nextToken().compareTo("SI")==0)?true:false );
            txtComandoLectura.setText(vec.nextToken());
            txtSegundos.setText(vec.nextToken());

        }


    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    //UIManager.setLookAndFeel(UIManager.setLookAndFeel());
                    new FrmMantenimiento().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FrmMantenimiento.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(FrmMantenimiento.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(FrmMantenimiento.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(FrmMantenimiento.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGrabar;
    private javax.swing.JButton btnPrueba;
    private javax.swing.JButton btnSalir;
    private javax.swing.JCheckBox chkLecturaContinua;
    private javax.swing.JComboBox cmbBaudios;
    private javax.swing.JComboBox cmbBitsCaracter;
    private javax.swing.JComboBox cmbBitsParada;
    private javax.swing.JComboBox cmbControlFlujo;
    private javax.swing.JComboBox cmbModoLectura;
    private javax.swing.JComboBox cmbParidad;
    private javax.swing.JComboBox cmbPuerto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private java.awt.List list1;
    private javax.swing.JTextField txtComandoLectura;
    private javax.swing.JTextField txtFormatoCadena;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtSegundos;
    private javax.swing.JTextField txtSubcadena;
    // End of variables declaration//GEN-END:variables

}
